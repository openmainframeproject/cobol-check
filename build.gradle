import static org.apache.tools.ant.taskdefs.condition.Os.*

plugins {
    id 'java-library'
    id 'org.sonarqube' version '3.0'
    id 'jacoco'
}

def productVersion = '0.2.15'
def productName = 'cobol-check'
group = 'org.openmainframeproject'
description = 'Unit testing framework for Cobol'

def approvalExpectedOutput = "approval-test-expected.txt"
def approvalActualOutput = "output/testResults.txt"

sonarqube {
    properties {
        property "sonar.projectKey", "neopragma_cobol-check"
        property "sonar.organization", "neopragma-github"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.exclusions", "**/EIBResponseCodes.java,**/Keyword.java"
    }
}

jacoco {
    toolVersion = "0.8.6"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                minimum = 0.8
            }
            excludes = ['*Constants',
                        '*Exception',
                        '*DirectoryNameMatcher',
                        '*Driver',
                        '*EIBResponseCodes',
                        '*Exception*',
                        '*Generator',
                        '*Keyword',
                        '*LinuxProcessLauncher',
                        '*Log',
                        '*Flag',
                        '*StringHelper',
                        '*TestSuiteConcatenator']
        }
        rule {
            element = 'CLASS'
            limit {
                minimum = 0.2
            }
            includes = ['*LinuxProcessLauncher',
                        '*TestSuiteConcatenator']
        }
    }
}

ext {
    mainClassName = 'org.openmainframeproject.cobolcheck.Main'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources", "src/test/resources"
        }
    }
}

test {
    description 'Runs all tests'
    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed"
    }
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:deprecation'
    options.deprecation = true
}

dependencies {
    implementation 'org.jetbrains:annotations:15.0'
    implementation 'javax.xml.bind:jaxb-api:2.3.0'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.2'
    testImplementation('org.junit.jupiter:junit-jupiter:5.6.1')
    testImplementation('org.junit.jupiter:junit-jupiter-params:5.7.0')
    testImplementation 'org.mockito:mockito-inline:3.6.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.6.28'
}

def unitTest = tasks.register("unitTest", Test) {
    description 'Run unit tests only'
    useJUnitPlatform()
    filter {
        includeTestsMatching "org.openmainframeproject.cobolcheck.*Test"
    }
}
def integrationTest = tasks.register("integrationTest", Test) {
    description 'Run integration tests only'
    dependsOn unitTest
    useJUnitPlatform()
    filter {
        includeTestsMatching "org.openmainframeproject.cobolcheck.*IT"
    }
}

task clearLibJar(type: Delete) {
    delete fileTree(dir:'build/libs', include: '**.jar')
}

task fatJar(type: Jar) {
//    archiveFileName "${productName}-${productVersion}.jar"
    archiveName "${productName}-${productVersion}.jar"
    description 'Create executable jar'
    dependsOn integrationTest, clearLibJar
    manifest {
        attributes 'Main-Class': "${mainClassName}",
                   'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': productVersion
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyJarToBin(type: Copy) {
    description 'Copy executable jar to bin directory prior to distribution'
    dependsOn fatJar
    from('build/libs/')
    include '**/*.jar'
    into 'bin/'
}

task clearExtensionJar(type: Delete) {
    delete fileTree(dir:'vs-code-extension/Cobol-check/bin', include: '**.jar')
}

task copyJarToExtension(type: Copy) {
    description 'Copy executable jar to bin and VS Code extension bin directories prior to distribution'
    dependsOn clearExtensionJar, fatJar
    from('build/libs/')
    include '**/*.jar'
    into 'vs-code-extension/Cobol-check/bin/'
}


task copyRunScripts(type: Copy) {
    description 'Makes copies of run scripts'
    from "${projectDir}/cobolcheck.cmd"
    into "${projectDir}/GradleTemp"
    filter { line -> line.replaceAll('@VERSION@', productVersion) }
    from "${projectDir}/cobolcheck"
    into "${projectDir}/GradleTemp"
    filter { line -> line.replaceAll('@VERSION@', productVersion) }
}

task prepareDistribution(type: Zip) {
    archiveName "${productName}-${productVersion}.zip"
    description 'Prepare distribution archive'
    dependsOn copyJarToBin, copyJarToExtension, copyRunScripts
    from ("${projectDir}"){
        include([ "config.properties",
                  "scripts/*",
                  "bin/${productName}-${productVersion}.jar",
                  "src/main/cobol/ALPHA.CBL",
                  "src/main/cobol/NUMBERS.CBL",
                  "src/test/cobol/ALPHA/*",
                  "src/test/cobol/NUMBERS/*" ])
        rename("build/libs/(.*)", "\$1")
    }

    from ("${projectDir}/GradleTemp")

    doLast {
        delete "GradleTemp"
    }
}

def approvalTest = tasks.register("approvalTest", Test) {
    description 'Run approval test only'
    dependsOn fatJar
    def output = -1

    if ("${OS_NAME}" == "linux") {
        println "Linux detected"
        def proc = "./approvaltest".execute()
        proc.waitForProcessOutput(System.out, System.err)
    }
    if ("${OS_NAME}".toLowerCase().contains("windows")) {
        println "Windows detected"
        def proc = "./approvaltestWin.cmd".execute()
        proc.waitForProcessOutput(System.out, System.err)
    }

    output = new BuildHelper().compareFiles(approvalExpectedOutput, approvalActualOutput, true)
    println "exit from compare: ${output}"

    if (output != 0) {
        println "*** FAIL ***"
        throw new StopExecutionException("${approvalExpectedOutput} and ${approvalActualOutput} are different")
    } else {
        println "${approvalExpectedOutput} matches ${approvalActualOutput} - PASS"
    }
}

task defaultProperties {
    description 'Show the default properties for this project'
    println "Project: $project"
    println "Name: $name"
    println "Path: $path"
    println "Project directory: $projectDir"
    println "Build directory: $buildDir"
    println "Version: $version"
    println "Group: $project.group"
    println "Description: $project.description"
}

task osInfo {
    description 'Show information about the operating system'
    doLast {
        println "Family:       ${OS_NAME}"
        println "Version:      ${OS_VERSION}"
        println "Architecture: ${OS_ARCH}"
    }
}

class BuildHelper{
    int compareFiles(String file1, String file2, boolean trimLines){
        BufferedReader reader1
        BufferedReader reader2
        try{
            reader1 = new BufferedReader(new FileReader(file1))
            reader2 = new BufferedReader(new FileReader(file2))
            int lineCount = 0
            String line1 = ""
            String line2 = ""
            while ((line1 = reader1.readLine()) != null && (line2 = reader2.readLine()) != null){
                lineCount++
                if (trimLines){
                    line1 = line1.trim()
                    line2 = line2.trim()
                }
                if (!line1.equals(line2)){
                    println("Difference on line ${lineCount}:")
                    println("   ${file1}: ${line1}")
                    println("   ${file2}: ${line2}")
                    return 1
                }
            }
            return 0
        } catch( Exception e){
            println("Error while comparing: ${e.message}")
            return -1
        } finally{
            if (reader1 != null) reader1.close()
            if (reader2 != null) reader2.close()
        }

    }
}
